{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "30270c2d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:23.429286Z",
     "iopub.status.busy": "2023-07-10T20:00:23.427769Z",
     "iopub.status.idle": "2023-07-10T20:00:27.170414Z",
     "shell.execute_reply": "2023-07-10T20:00:27.169356Z"
    },
    "papermill": {
     "duration": 3.752281,
     "end_time": "2023-07-10T20:00:27.173108",
     "exception": false,
     "start_time": "2023-07-10T20:00:23.420827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "import torch.nn as nn\n",
    "import torch\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import csv\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d9a544f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:27.184104Z",
     "iopub.status.busy": "2023-07-10T20:00:27.182997Z",
     "iopub.status.idle": "2023-07-10T20:00:27.224960Z",
     "shell.execute_reply": "2023-07-10T20:00:27.223565Z"
    },
    "papermill": {
     "duration": 0.050446,
     "end_time": "2023-07-10T20:00:27.228117",
     "exception": false,
     "start_time": "2023-07-10T20:00:27.177671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data_with_labels = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n",
    "\n",
    "y_train = train_data_with_labels[['Survived']].copy().to_numpy()\n",
    "train_data = train_data_with_labels.drop(['Survived'],axis=1)\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ff37b348",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:27.238658Z",
     "iopub.status.busy": "2023-07-10T20:00:27.238272Z",
     "iopub.status.idle": "2023-07-10T20:00:27.282405Z",
     "shell.execute_reply": "2023-07-10T20:00:27.281271Z"
    },
    "papermill": {
     "duration": 0.053474,
     "end_time": "2023-07-10T20:00:27.285943",
     "exception": false,
     "start_time": "2023-07-10T20:00:27.232469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n",
    "passengerID = test_data[['PassengerId']].copy().to_numpy()\n",
    "\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "adaf4703",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:27.297413Z",
     "iopub.status.busy": "2023-07-10T20:00:27.297030Z",
     "iopub.status.idle": "2023-07-10T20:00:27.312395Z",
     "shell.execute_reply": "2023-07-10T20:00:27.311106Z"
    },
    "papermill": {
     "duration": 0.024976,
     "end_time": "2023-07-10T20:00:27.315772",
     "exception": false,
     "start_time": "2023-07-10T20:00:27.290796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "categorical_features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\n",
    "X_train = pd.get_dummies(train_data[categorical_features]).to_numpy()\n",
    "X_test = pd.get_dummies(test_data[categorical_features]).to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e63b659d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:27.327639Z",
     "iopub.status.busy": "2023-07-10T20:00:27.327277Z",
     "iopub.status.idle": "2023-07-10T20:00:27.390977Z",
     "shell.execute_reply": "2023-07-10T20:00:27.389868Z"
    },
    "papermill": {
     "duration": 0.07328,
     "end_time": "2023-07-10T20:00:27.394113",
     "exception": false,
     "start_time": "2023-07-10T20:00:27.320833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = nn.Sequential(\n",
    "          nn.Linear(5,64),\n",
    "          nn.ReLU(),\n",
    "          nn.Linear(64,1),\n",
    "          nn.Sigmoid()\n",
    "        )\n",
    "X_train = torch.tensor(X_train).float()\n",
    "y_train = torch.tensor(y_train).float()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8a95706e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:27.407792Z",
     "iopub.status.busy": "2023-07-10T20:00:27.407318Z",
     "iopub.status.idle": "2023-07-10T20:00:28.475163Z",
     "shell.execute_reply": "2023-07-10T20:00:28.473522Z"
    },
    "papermill": {
     "duration": 1.079234,
     "end_time": "2023-07-10T20:00:28.478928",
     "exception": false,
     "start_time": "2023-07-10T20:00:27.399694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.2878, grad_fn=<BinaryCrossEntropyBackward0>)\n",
      "0.875\n"
     ]
    }
   ],
   "source": [
    "BS = 32\n",
    "loss_function = torch.nn.BCELoss()    # binary cross entropy loss function for n categories\n",
    "optim = torch.optim.AdamW(model.parameters())   # adamW optimizer, with model's parameters\n",
    "np.random.seed(1)\n",
    "for i in range(1000):\n",
    "    sample = np.random.randint(0,X_train.shape[0],size=BS)  # 32 random ints * number of training examples\n",
    "    X_batch = X_train[sample]                 # select those random training examples\n",
    "    y_batch = y_train[sample]\n",
    "    y_pred = model.forward(X_batch)\n",
    "    y_pred_binary = (y_pred > 0.5).float()\n",
    "    accuracy = (y_pred_binary == y_batch).sum().item() / BS\n",
    "    \n",
    "    loss = loss_function(y_pred,y_batch)\n",
    "    optim.zero_grad() \n",
    "    loss.backward()     \n",
    "    optim.step()\n",
    "print(loss)\n",
    "print(accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c5ba172d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:28.495242Z",
     "iopub.status.busy": "2023-07-10T20:00:28.494818Z",
     "iopub.status.idle": "2023-07-10T20:00:28.523154Z",
     "shell.execute_reply": "2023-07-10T20:00:28.521874Z"
    },
    "papermill": {
     "duration": 0.040931,
     "end_time": "2023-07-10T20:00:28.527242",
     "exception": false,
     "start_time": "2023-07-10T20:00:28.486311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_preds = model.forward(torch.tensor(X_test).float())\n",
    "final_preds = [1 if i >= 0.5 else 0 for i in y_preds]\n",
    "type(final_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ce81714a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-10T20:00:28.543974Z",
     "iopub.status.busy": "2023-07-10T20:00:28.543489Z",
     "iopub.status.idle": "2023-07-10T20:00:28.552839Z",
     "shell.execute_reply": "2023-07-10T20:00:28.551364Z"
    },
    "papermill": {
     "duration": 0.022515,
     "end_time": "2023-07-10T20:00:28.557128",
     "exception": false,
     "start_time": "2023-07-10T20:00:28.534613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rows = []\n",
    "for idNumber, pred in zip(passengerID,final_preds):\n",
    "    rows.append([idNumber.item(), pred])\n",
    "    \n",
    "filename = 'output.csv'\n",
    "headers = ['PassengerId', 'Survived']\n",
    "\n",
    "# Write the data to the CSV file\n",
    "with open(filename, 'w', newline='') as csvfile:\n",
    "    writer = csv.writer(csvfile)\n",
    "    writer.writerow(headers)  # Write the header row\n",
    "    writer.writerows(rows)  # Write the data rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50611447",
   "metadata": {
    "papermill": {
     "duration": 0.009605,
     "end_time": "2023-07-10T20:00:28.574593",
     "exception": false,
     "start_time": "2023-07-10T20:00:28.564988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25260da7",
   "metadata": {
    "papermill": {
     "duration": 0.005977,
     "end_time": "2023-07-10T20:00:28.585550",
     "exception": false,
     "start_time": "2023-07-10T20:00:28.579573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.29114,
   "end_time": "2023-07-10T20:00:31.402034",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-07-10T20:00:10.110894",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
